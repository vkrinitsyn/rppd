
[package]
name = "rppd"
version = "0.2.3"
authors = ["Vladimir Krinitsyn <v.krinitsyn@gmail.com>"]
edition = "2024"
description = "RPPD - Rust Python Postgres"

[lib]
name = "rppde" # to use this package as embeded library

[[bin]]
name = "rppd"
path = "src/main.rs"


[dependencies]
slog = { version = "2.7.0", features=["default", "max_level_trace", "release_max_level_info"] }
sloggers = "2.2.0"
chrono = { version = "0.4.19", features = ["serde"] }
tokio = { version = "1.25.0", features = ["macros", "rt-multi-thread", "net", "rt", "fs", "time", "signal", "signal-hook-registry" ] }
tokio-stream = { version = "0.1.8", features = ["net"] }
async-trait = "^0.1"
tonic = { version = "0.13.0", features = ["prost", "codegen"] }

uuid = {version= "1.5.0", features = ["v4"]}
base64 = "^0.22"
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"

bb8-postgres = {version = "0.9.0", features = ["with-chrono-0_4","with-uuid-0_8"]}

thiserror = "*"
pyo3 = { version = "^0.24", features = ["auto-initialize", "uuid"] }

etcd = {git = "https://github.com/vkrinitsyn/etcd.git"}
etcd-client = { version = "0.14.1", optional = true}

sqlx = { version = "0.8.3", features = ["postgres", "runtime-tokio", "chrono"] }

i18n-embed-fl = "^0.9"
i18n-embed = { version = "^0.15", features = ["fluent-system", "desktop-requester"]}
rust-embed = "^8.6"
unic-langid = "0.9"
lazy_static = "1.4.0"
cron-parser = "0.10.0"
dns-lookup = "2.0.4"
shims = {git = "https://github.com/vkrinitsyn/shim.git"}
rppd-common = {path = "../rppd-common"}
opentelemetry_sdk = { version = "^0.29", features = ["rt-tokio", "tracing"], optional = true }
opentelemetry = { version = "^0.29", optional = true }


[features]
default = ["etcd-embeded"]

# use embeded etcd server with internal endpoint/binding port reuse with etcd
etcd-embeded = []

# use provided etcd server instance, while rppd use as library and re-used existing endpoints/binding port for either rppd and etcd
etcd-provided = []

# use external etcd server, like valilla implementation. Require etcd client configuration (not fully implemented in RPPD)
# queue messaging wont work in this case, only subscription to key change i.e. topic
etcd-external = ["dep:etcd-client"]

# The RPPD use as a library with config table extranally provided
lib-embedded = []
tracer = ["dep:opentelemetry_sdk", "dep:opentelemetry"]


[profile.dev]
panic = "unwind"

[profile.release]
panic = "unwind"

opt-level = "z"
lto = "thin"
codegen-units = 1
