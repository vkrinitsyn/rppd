/*%LPH%*/

syntax = "proto3";

package rg;

enum DbAction {
	UPDATE = 0;
	INSERT = 1;
	DELETE = 2;
	TRUNCATE = 3;
}

message EventRequest {
	// The name includes schema, i.e.: schema.table
	string table_name = 1;
	DbAction event_type = 2;

	// if false, then pk_value took by previous call of EventResponse.column_name
	// this is implemented to avoid complex solution for a topic names
	bool id_value = 3;

	// rppd_config.id of caller host or None if called by trigger
	oneof optional_caller {
			int32 call_by = 4;
	}

	// return on second call with this values
	// the function might pass non PK values OR combined PK
	repeated PkColumn pks = 5;
}

enum PkColumnType {
  Int = 0;
  BigInt = 1;
}


message PkColumn {
  string column_name = 1;
	// default Int
	PkColumnType column_type = 2;
	// see PkColumnType
	oneof pk_value {
		int32 int_value = 5;
		int64 bigint_value = 6;
	}
}

message EventResponse {
	bool saved = 1;
	// needs to call again with column name data
	repeated PkColumn repeat_with = 2;
}

enum FnAction {
	// not found, might be completed and cleaned
	NA = 0;
	// recently done
	QUEUEING = 1;
	// executing
	IN_PROGRESS = 2;
	// executing on remote
	ON_REMOTE = 3;
}

message StatusRequest {
	// node id to check configuration consistency
	int32 node_id = 1;
	// function status as id from rppd_fn_log
	int64 fn_log_id = 2;

}

message StatusResponse {
	// this node id
	int32 node_id = 1;
	// master node id to check configuration consistency
	bool is_master = 2;
	// total in queue
	int32 queued = 3;
	// total in progress
	int32 in_proc = 4;
	// total python to progress pooled connections
	int32 pool = 5;
	// status of requested function, NA=0 if no function requested
	FnAction status = 6;
}


//The GRPC service
service Grpc {
  // call by trigger or by master
	rpc event(EventRequest) returns (EventResponse) {}

  // call between nodes
	rpc status(StatusRequest) returns (StatusResponse) {}

}
